package src.main;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;


public class InicioConsole {
    private static List<Usuario> listaUsuarios = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        iniciarMenuConsole(); // M√©todo que controla o menu no console
    }

    // M√©todo que inicia o menu no console
    public static void iniciarMenuConsole() {
        while (true) {
            System.out.println("\n=== MENU CONSOLE ===");
            System.out.println("Seja bem-vindo(a)!");
            System.out.println("Aqui voc√™ pode ter acesso a todos os recursos necess√°rios para usar seu rob√¥ did√°tico! O que deseja fazer?");
            System.out.println("");
            System.out.println("1 - Cadastrar usu√°rio");
            System.out.println("2 - Salvar cadastro do usu√°rio");
            System.out.println("3 - Abrir interface gr√°fica");
            System.out.println("4 - Mostrar usu√°rios cadastrados");
            System.out.println("5 - Sair do programa");
            System.out.print("Escolha uma op√ß√£o: ");

            // L√™ a op√ß√£o do usu√°rio
            // Trata exce√ß√µes para garantir que o usu√°rio digite um n√∫mero v√°lido
            try {
                int opcao = Integer.parseInt(scanner.nextLine());
                switch (opcao) {
                    case 1:
                        System.out.println("Iniciando cadastro de usu√°rio...");
                        cadastrarUsuario();
                        break;
                    case 2:
                        System.out.println("Salvando cadastro do usu√°rio...");
                        salvarUsuariosEmJson();
                        break;
                    case 3:
                        System.out.println("Abrindo interface gr√°fica...");
                        TelaLogin.iniciar();
                        break;
                    case 4:
                        System.out.println("Mostrando usu√°rios cadastrados...");
                        mostrarUsuarios();
                        break;  
                    case 5:
                        System.out.println("Saindo do programa...");
                        System.out.println("Obrigado por usar o Botinho!");
                        System.exit(0);


                    default:
                        System.out.println("Op√ß√£o inv√°lida!");
                }
            } catch (NumberFormatException e) {
                System.out.println("Erro: Digite apenas n√∫meros!");
            }
        }
    }

    // M√©todo que exibe os usu√°rios cadastrados no console
    public static void mostrarUsuarios() {
        if(listaUsuarios == null) {
            System.out.println("A lista de usu√°rios √© NULL");
            return;
        }
        
        System.out.println("\nüìã Usu√°rios na lista (" + listaUsuarios.size() + "):");
        for(int i = 0; i < listaUsuarios.size(); i++) {
            System.out.println((i+1) + ". " + listaUsuarios.get(i).toString());
        }
    }

    // M√©todo que cadastra um novo usu√°rio
    public static void cadastrarUsuario() {
    System.out.print("Digite o nome: ");
    String nome = scanner.nextLine();
    
    System.out.print("Digite o email: ");
    String email = scanner.nextLine();

    System.out.print("Digite a senha: ");
    String senha = scanner.nextLine();

    // Valida√ß√£o simples
    if (nome.isEmpty() || !email.contains("@")) {
        System.out.println("Dados inv√°lidos! Nome n√£o pode ser vazio e email deve conter '@'.");
        return;
    }

    Usuario novoUsuario = new Usuario(nome, email, senha);
    listaUsuarios.add(novoUsuario);
    System.out.println("‚úÖ Usu√°rio cadastrado!");
    }

// M√©todo que salva a lista de usu√°rios em um arquivo JSON
    public static void salvarUsuariosEmJson() {
    mostrarUsuarios(); // Mostra o conte√∫do atual antes de salvar
    
    if(listaUsuarios == null || listaUsuarios.isEmpty()) {
        System.out.println("‚ö†Ô∏è Lista de usu√°rios vazia - nada para salvar");
        return;
    }

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        
        File arquivo = new File("src/resources/data/Usuario.json");
        
        // 1. Verifica se o arquivo j√° existe e tem conte√∫do
        if(arquivo.exists() && arquivo.length() > 0) {
            // 2. Carrega os usu√°rios existentes
            List<Usuario> usuariosExistentes = mapper.readValue(arquivo, 
                new TypeReference<List<Usuario>>(){});
            
            // 3. Filtra para adicionar apenas usu√°rios novos
            for(Usuario novoUsuario : listaUsuarios) {
                boolean usuarioJaExiste = usuariosExistentes.stream()
                    .anyMatch(u -> 
                        u.getEmail().equalsIgnoreCase(novoUsuario.getEmail()) &&
                        u.getNome().equalsIgnoreCase(novoUsuario.getNome()));
                
                if(!usuarioJaExiste) {
                    usuariosExistentes.add(novoUsuario);
                } else {
                    System.out.println("Usu√°rio " + novoUsuario.getNome() + 
                        " j√° existe - n√£o ser√° adicionado novamente");
                }
            }
            
            // 4. Atualiza a lista para salvar
            listaUsuarios = usuariosExistentes;
        }
        
        // 5. Salva a lista consolidada
        mapper.writeValue(arquivo, listaUsuarios);
        
        System.out.println("\n‚úÖ " + listaUsuarios.size() + 
            " usu√°rios salvos em: " + arquivo.getAbsolutePath());
    } catch (Exception e) {
        System.err.println("\n‚ùå Erro ao salvar: " + e.getMessage());
        e.printStackTrace();
    }
}
}